---

  - name: install jre8
    apt:
     name: openjdk-8-jre
     state: present
     update_cache: yes
    become: true  
 
  - name: install git
    apt:
     name: git
     state: present
    become: true

  - name: Set timezone to EST
    lineinfile: 
      dest: /etc/timezone 
      regexp: ".*" 
      line: "EST"
    become: yes


  - name: Install the headless chrome package
    apt:
      deb: https://dl.google.com/linux/direct/google-chrome-unstable_current_amd64.deb
    become: true

  - name: password given
    debug:
      msg: "{{ mysql_password }}"


  - name: Mysql | Set root password
    become: yes
    shell: debconf-set-selections <<< 'mysql-server mysql-server/root_password password {{ mysql_password }}'
    args:
      executable: /bin/bash

  - name: Mysql | Set root password again
    become: yes
    shell: debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password {{ mysql_password }}' 
    args:
      executable: /bin/bash


  - name: install mysql server
    become: yes
    apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
    vars:
        packages:
            - mysql-server-5.7
            - python-mysqldb
            - python3-pymysql
            - redis-server


  - name: Ensure Redis is started
    service: 
      name: redis-server 
      state: started 
      enabled: yes
    become: yes


  - name: Copy database dump file
    copy:
      src: keys.txt
      dest: /tmp
  

  - name: Load the keys into redis
    shell: cat /tmp/keys.txt | redis-cli --pipe

  - name: update mysql root password for all root accounts
    become: yes
    mysql_user: 
      name: "{{ mysql_user }}"
      host: all 
      password: ""
      login_user: "{{ mysql_user }}"
      login_password: "{{ mysql_password }}"
      check_implicit_admin: yes
      priv: "*.*:ALL,GRANT"

  - name:  print current directory
    debug: 
        msg: "{{ ansible_facts.env['PWD'] }}"


  - name: Ansible template creation
    template:
        src: root.cnf.j2
        dest: /root/.my.cnf
    become: yes


  - name: remove mysql password
    command: mysqladmin --user=root password ""
    become: yes

       
  - name: command restart
    command: service mysql restart
    become: yes

    
  - name: Download the package from Tomcat website
    become: yes
    get_url: 
      url:  "{{ url }}"
      dest: /tmp/

    
  - name: create 'tomcat' group
    become: yes
    group:
        name: "{{ tomcat_grp }}"
        state: present

  - name: Create 'tomcat' user
    become: yes
    user: 
        name: "{{tomcat_usr}}"
        group: "{{ tomcat_grp }}"
        system: yes

  - name: Change tomcat directory permissions for the tomcat group and tomcat user
    file:
        path: /opt/tomcat
        state: directory
        owner: "{{tomcat_usr}}"
        group: "{{tomcat_grp}}"
        recurse: yes
    become: true

  - name: unpack to folder
    become: yes
    unarchive: 
        src: /tmp/{{archive}}
        dest: /opt/
        copy: no
  
  - name: copy the folder
    become: yes
    # sudo_user: "{{tomcat_usr}}"
    synchronize: 
      src: /opt/{{unpackfolder}}/
      dest: /opt/tomcat/
    delegate_to: "{{ inventory_hostname }}"

  - name: change grp user for whole folder
    become: yes
    file:
      path: /opt/tomcat
      group: "{{tomcat_grp}}"
      recurse: yes

  - name: change conf permissions
    become: yes
    file:
      path: /opt/tomcat/conf
      recurse: yes
      mode: "g+r"

  - name: change permissions for conf folder
    become: yes
    file:
      path: /opt/tomcat/conf
      mode: "g+x"

  - name: change permissions webapps folder
    become: yes
    file:
      path: /opt/tomcat/webapps
      owner: "{{tomcat_usr}}"

  - name: change permissions work folder
    become: yes
    file:
      path: /opt/tomcat/work
      owner: "{{tomcat_usr}}"

  - name: change permissions temp folder
    become: yes
    file:
      path: /opt/tomcat/temp
      owner: "{{tomcat_usr}}"

  - name: change permissions logs
    become: yes
    file:
      path: /opt/tomcat/logs
      owner: "{{tomcat_usr}}"


  - name: copy the service file 
    become: yes
    copy:
        src: tomcat.service
        dest: /etc/systemd/system/
        mode: 0777
    
  - name: copy the war file
    become: yes
    copy:
        src: /home/ubuntu/featureflag/iTrust2.war
        #src: /var/lib/jenkins/iTrust\ Build/iTrust2/target/iTrust2.war
        dest: /opt/tomcat/webapps/

  - name: check if DB exists
   # become: yes
    shell: mysql -u {{mysql_user}} -e 'SHOW DATABASES;'
    register: dbstatus

  - name: Copy database dump file
    copy:
      src: all_databases.sql
      dest: /tmp
    when: "'iTrust2' not in dbstatus.stdout"

  - name: Import mysql dump
 #   become: yes
    mysql_db:
      login_user: root
      state: import
      name: all
      target: /tmp/all_databases.sql
    when: "'iTrust2' not in dbstatus.stdout"

  - name: Make sure a service is running
    become: yes
    systemd:
        state: started
        daemon_reload: yes
        name: tomcat
